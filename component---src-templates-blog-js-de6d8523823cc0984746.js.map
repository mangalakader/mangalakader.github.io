{"version":3,"sources":["webpack:///./src/templates/blog.js","webpack:///./src/components/BannerLanding.js","webpack:///./src/components/seo.js"],"names":["Blog","props","pageContext","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","title","content","id","className","data","allMarkdownRemark","edges","map","i","node","key","to","fields","slug","src","Math","floor","random","alt","frontmatter","date","excerpt","md","align","rel","query","BannerLanding","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","property","author","concat","defaultProps"],"mappings":"2FAAA,sHA4FeA,UAhDF,SAAAC,GAAU,IAAD,EACcA,EAAMC,YAAhCC,EADY,EACZA,YACFC,EAA0B,IAAhBD,EACVE,EAASF,IAHK,EACCG,SAGfC,EACJ,SAAWJ,EAAc,GAAM,EAAI,GAAK,KAAOA,EAAc,GAAGK,YAC5DC,EAAW,UAAYN,EAAc,GAAGK,WAC9C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKE,MAAM,SACX,kBAAC,IAAD,CACEA,MAAM,wBACNC,QAAQ,sFAGV,yBAAKC,GAAG,QArDH,SAAAX,GACT,OACE,6BAASW,GAAG,MAAMC,UAAU,cACzBZ,EAAMa,KAAKC,kBAAkBC,MAAMC,KAAI,WAAWC,GAAX,IAAGC,EAAH,EAAGA,KAAH,OACtC,6BAASC,IAAKD,EAAKP,IACjB,kBAAC,OAAD,CAAMS,GAAI,SAAWF,EAAKG,OAAOC,KAAMV,UAAU,SAC/C,yBACEW,IACE,oCACAC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,MAExCE,IAAKT,EAAKU,YAAYnB,SAG1B,yBAAKG,UAAU,WACb,yBAAKA,UAAU,SACb,4BAAQA,UAAU,SAChB,4BAAKM,EAAKU,YAAYnB,OACtB,8BAAOS,EAAKU,YAAYC,OAE1B,2BACE,+BAAQX,EAAKY,UAEf,wBAAIlB,UAAU,WACZ,4BACE,kBAAC,OAAD,CAAMQ,GAAI,QAAUF,EAAKG,OAAOC,KAAMV,UAAU,UAAhD,uBA6BTmB,CAAG/B,GACJ,yBAAKY,UAAU,QAAQoB,MAAM,UAC3B,wBAAIpB,UAAU,WACZ,6BACIT,GACA,kBAAC,OAAD,CACEiB,GAAId,EACJ2B,IAAI,OACJrB,UAAU,gCAHZ,WASJ,6BACIR,GACA,kBAAC,OAAD,CACEgB,GAAIZ,EACJyB,IAAI,OACJrB,UAAU,kCAHZ,gBAkBT,IAAMsB,EAAK,a,kCC9FlB,yBAeeC,IAbO,SAAAnC,GAAK,OACzB,6BAASW,GAAG,SAASC,UAAU,UAC7B,yBAAKA,UAAU,SACb,4BAAQA,UAAU,SAChB,4BAAKZ,EAAMS,QAEb,yBAAKG,UAAU,WACb,2BAAIZ,EAAMU,c,kCCTlB,0DAYA,SAAS0B,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAM9B,EAAS,EAATA,MAC9B+B,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEF7B,MAAOA,EACPoC,cAAa,QAAUL,EAAKG,aAAalC,MACzC8B,KAAM,CACJ,CACEO,KAAK,cACLpC,QAASgC,GAEX,CACEK,SAAS,WACTrC,QAASD,GAEX,CACEsC,SAAS,iBACTrC,QAASgC,GAEX,CACEK,SAAS,UACTrC,QAAQ,WAEV,CACEoC,KAAK,eACLpC,QAAQ,WAEV,CACEoC,KAAK,kBACLpC,QAAS8B,EAAKG,aAAaK,QAE7B,CACEF,KAAK,gBACLpC,QAASD,GAEX,CACEqC,KAAK,sBACLpC,QAASgC,IAEXO,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-templates-blog-js-de6d8523823cc0984746.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport BannerLanding from '../components/BannerLanding'\n\nconst md = props => {\n  return (\n    <section id=\"one\" className=\"spotlights\">\n      {props.data.allMarkdownRemark.edges.map(({ node }, i) => (\n        <section key={node.id}>\n          <Link to={'/post/' + node.fields.slug} className=\"image\">\n            <img\n              src={\n                'https://picsum.photos/600?random=' +\n                Math.floor(Math.random() * Math.floor(10000))\n              }\n              alt={node.frontmatter.title}\n            />\n          </Link>\n          <div className=\"content\">\n            <div className=\"inner\">\n              <header className=\"major\">\n                <h5>{node.frontmatter.title}</h5>\n                <span>{node.frontmatter.date}</span>\n              </header>\n              <p>\n                <small>{node.excerpt}</small>\n              </p>\n              <ul className=\"actions\">\n                <li>\n                  <Link to={'/post' + node.fields.slug} className=\"button\">\n                    Learn more\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </section>\n      ))}\n    </section>\n  )\n}\n\nconst Blog = props => {\n  const { currentPage, numPages } = props.pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage =\n    '/blog' + (currentPage - 1 === 1 ? '' : '/' + (currentPage - 1).toString())\n  const nextPage = '/blog/' + (currentPage + 1).toString()\n  return (\n    <Layout>\n      <SEO title=\"Blog\" />\n      <BannerLanding\n        title=\"My Share of Knowledge\"\n        content=\"Read every book, blog, website, whatever, about what you want to be an expert in.\"\n      />\n\n      <div id=\"main\">\n        {md(props)}\n        <div className=\"inner\" align=\"center\">\n          <ul className=\"actions\">\n            <li>\n              {!isFirst && (\n                <Link\n                  to={prevPage}\n                  rel=\"prev\"\n                  className=\"button special fit text-left\"\n                >\n                  ← Prev\n                </Link>\n              )}\n            </li>\n            <li>\n              {!isLast && (\n                <Link\n                  to={nextPage}\n                  rel=\"next\"\n                  className=\"button special fit align-right\"\n                >\n                  Next →\n                </Link>\n              )}\n            </li>\n          </ul>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Blog\n\nexport const query = graphql`\n  query($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      filter: { frontmatter: { published: { eq: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            comments\n          }\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 500)\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\n\nconst BannerLanding = props => (\n  <section id=\"banner\" className=\"style2\">\n    <div className=\"inner\">\n      <header className=\"major\">\n        <h1>{props.title}</h1>\n      </header>\n      <div className=\"content\">\n        <p>{props.content}</p>\n      </div>\n    </div>\n  </section>\n)\n\nexport default BannerLanding\n","/**\nSEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *   *\n *    * See: https://www.gatsbyjs.org/docs/use-static-query/\n *     */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}