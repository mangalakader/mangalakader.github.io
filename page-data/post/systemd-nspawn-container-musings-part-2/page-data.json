{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/systemd-nspawn-container-musings-part-2/","result":{"data":{"markdownRemark":{"html":"<h2>Recap:</h2>\n<p>In the last part of the series, we saw how to configure the network in host for containers and learnt how to pull images using <code>machinectl</code>. If you haven't gone through that first, please do so.</p>\n<h2>Before Booting your container for the first time:</h2>\n<p>I'm using an cloud based ubuntu image, as it provides cloud-init support, which lets me configure my container during the boot itself. I'm not going to go into the details of cloud-init, but I'll give you some idea about minimising full-blown cloud setup.</p>\n<p>Also, you can feel familiar with cloud vendors system startup by using the cloud based images.</p>\n<h2>cloud-init:</h2>\n<p>By default, if you don't configure cloud-init, it will try to hit and reach many cloud vendors looking for source configuration, which can take an awful lot of time approximately upto 40 minutes. We'll see how to disable that:</p>\n<ul>\n<li>\n<p>create a file named <code>ds-identity.cfg</code> with the following contents</p>\n<pre><code class=\"language-yaml\">datasource: NoCloud\npolicy: search,found=first,maybe=none,notfound=disabled\n</code></pre>\n<p>This file is telling the cloud-init to use the datasource as <code>NoCloud</code>, which will not do any lookup with cloud vendors</p>\n</li>\n<li>\n<p>create a folder <code>nocloud</code> and put three files in them, namely:</p>\n<ul>\n<li>\n<p><code>meta-data</code> with the following contents</p>\n<pre><code class=\"language-yaml\">instance-id: xenial\nlocal-hostname: xenial\n</code></pre>\n</li>\n<li>\n<p><code>user-data</code> with the following contents (or anything else based on your requirements)</p>\n<pre><code class=\"language-yaml\">#cloud-config\nhostname: xenial\n# Any package that you'd like to install in the container\npackages:\n  - bash\n  - bash-completion\n  - wget\n  - git\n  - make\n# Any setup commands that you'd like to run at the bootup\nruncmd:\n  - apt-get -y update\n  - apt-get -y clean\n  - apt-get -y autoremove --purge\n# for security, if you don't care, just put it as false\ndisable_root: true\n# Additional users that you'd like to provide access to your container after boot\nusers:\n  - name: testuser\n    gecos: TEST USER\n    lock_passwd: true\n    groups: [sudo, users, admin, adm, audio, cdrom, dialout, floppy, video, plugdev, dip, netdev]\n    shell: /bin/bash\n    sudo: [\"ALL=(ALL) NOPASSWD:ALL\"]\n# Setup a dummy password for the additional users and during first login, it'll ask for a new password\nchpasswd:\n  list: |\n    testuser:testuser\n# Common maintenance options\npackage_upgrade: true\npackage_update: true\npackage_reboot_if_required: true\npower_state:\n  delay: now\n  mode: reboot\n  message: Rebooting the OS\n  condition: if [ -e /var/run/reboot-required ];then exit 0; else exit 1; fi\n</code></pre>\n</li>\n<li>\n<p><code>network-config</code>, this is optional, only if you want to configure network at boot. This is necessary for me as my setup demands it.</p>\n<pre><code class=\"language-yaml\">version: 2\nethernets:\nhost0:\n  set-name: host0\n  addresses:\n    - 192.168.30.10/255.255.255.0\n  gateway4: 192.168.30.1\n  nameservers:\n    addresses: [1.1.1.1, 8.8.8.8, 8.8.4.4]\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>You should now be having the following directory structure</p>\n<pre><code class=\"language-bash\">$ tree\n.\n├── ds-identity.cfg\n├── nocloud\n│   ├── meta-data\n│   ├── network-config\n│   └── user-data\n└── xenial.nspawn\n1 directory, 5 files\n</code></pre>\n</li>\n</ul>\n<h2>Our mount file for container - xenial.nspawn:</h2>\n<p>Always have a copy of this file <code>xenial.nspawn</code> stored somewhere, as the container removal leads to deletion of this file. Copy this file to <code>/etc/systemd/nspawn</code> directory.</p>\n<pre><code class=\"language-toml\">[Exec]\n# Writable bind mounts don't with user namespacing\nPrivateUsers=pick\n[Files]\n# these lines should be familiar for those who are using docker\n# this is a simple read-only volume mount for the cloud-init files\nBindReadOnly=/home/user/cloud-init/ds-identity.cfg:/etc/cloud/ds-identity.cfg\nBindReadOnly=/home/user/cloud-init/nocloud:/var/lib/cloud/seed/nocloud\nPrivateUsersChown=yes\n# PrivateUsersChown is an expensive operation according to the documentation\n[Network]\nVirtualEthernet=yes\nBridge=virxen\n</code></pre>\n<h2>Let's fire up our container:</h2>\n<pre><code class=\"language-bash\">$ sudo systemd-nspawn -D /var/lib/machines/xenial -U -b -M xenial\n# -b flag means boot, which boots our container\n...............System Startup messages.............................\n......................Login Page...................................\n</code></pre>\n<p>You need to wait for sometime, for the cloud-init to complete, then only we can use the <code>testuser</code> created with the config file. You will see the familiar output logs from cloud-vendors. Use the below command to view the system setup and once, it comes to a halt, use the username and password from the cloud-init config file to login to your new container. Voila!!!</p>\n<pre><code class=\"language-bash\">$ sudo journalctl -M xenial -f\n.....................Cloud-Init Output Logs........................\n</code></pre>\n<h2>Those who want an easier way out of this setup:</h2>\n<p>Please use <code>debootsrap</code> as follows:</p>\n<pre><code class=\"language-bash\">$ sudo mkdir -p /var/lib/machines/{any name of your choice}\n$ sudo debootstrap --arch=amd64 jessie /var/lib/machines/{any name of your choice}/\n</code></pre>\n<p>If you don't specify any network in the <code>xenial.nspawn</code> file, the container will see all network interfaces of the host and acts like it's an application inside the host using the same ip addresses.</p>\n<p>Once, again, some of the steps might be volatile, such as networks, so please make a backup of them if you want to persist. Follow, these tutorials for making them persistent across system reboots.</p>\n<ul>\n<li><a href=\"https://upcloud.com/community/tutorials/configure-iptables-ubuntu/\">How to configure iptables on Ubuntu</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-iptables-on-ubuntu-14-04\">How To Set Up a Firewall Using Iptables on Ubuntu 14.04</a></li>\n<li><a href=\"https://pupli.net/2019/08/make-iptables-rules-persistent-after-reboot-on-ubuntu-18-04/\">Make iptables rules persistent after reboot on Ubuntu 18.04</a></li>\n<li><a href=\"https://linuxconfig.org/how-to-make-iptables-rules-persistent-after-reboot-on-linux\">How to make iptables rules persistent after reboot on Linux</a></li>\n</ul>\n<h2>Problems that might arise and solutions:</h2>\n<ul>\n<li>Network connectivity, please check the container ip adresses and journalctl (in host) for reason of failure and address them. Sometime, tweaking the iptables based on your host setup can help.</li>\n<li>Cloud-init some installation failed and needs a fresh start, use <code>sudo cloud-init clean</code> inside the container</li>\n<li>Do not use any overlaping ip addresses when using static ip address for the bridge</li>\n</ul>\n<h2>Container Management:</h2>\n<p>After the setup you don't have to use <code>systemd-nspawn</code> at all except certain cases. <code>machinectl</code> is more than sufficient to manage containers.</p>\n<ul>\n<li>start the container <code>machinectl start {container name}</code></li>\n<li>login into the container <code>machinectl login {container name}</code></li>\n<li>shell of the container <code>machinectl shell {container name}</code></li>\n<li>status of the container <code>machinectl status {container name}</code></li>\n<li>reboot the container <code>machinectl reboot {container name}</code></li>\n<li>terminate the container <code>machinectl terminate {container name}</code></li>\n<li>list running containers <code>machinectl list</code></li>\n<li>list available images <code>machinectl list-images</code></li>\n</ul>\n<p>I have intentionally left out the container resource management as it is easy to follow from the official documentation of @.nspawn from the references.</p>\n<h5>References:</h5>\n<ul>\n<li><a href=\"https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html\">systemd-nspawn official documentation</a></li>\n<li><a href=\"https://www.freedesktop.org/software/systemd/man/systemd.nspawn.html\">@.nspawn official documentation</a></li>\n<li><a href=\"https://blog.selectel.com/systemd-containers-introduction-systemd-nspawn/\">Introduction to systemd-nspawn by Selectel</a></li>\n<li><a href=\"https://patrickskiba.com/sysytemd-nspawn/2019/02/08/introduction-to-systemd-nspawn.html\">Introduction to systemd-nspawn by Patrick Skiba</a></li>\n<li><a href=\"https://fntlnz.wtf/post/systemd-nspawn/\">systemd-nspawn - Lorenzo Fontana</a></li>\n<li><a href=\"https://gist.github.com/zman0900/b2196a5168bbf2c0b14f094a8ca84ab1\">unifi-controller-systemd-nspawn.md</a></li>\n<li><a href=\"https://gist.github.com/artizirk/0d800be97bcdb35fb7bfd9755208e0e8\">systemd-nspawn container architecture</a></li>\n<li><a href=\"https://medium.com/@huljar/setting-up-containers-with-systemd-nspawn-b719cff0fb8d\">Setting up containers with systemd-nspawn</a></li>\n<li><a href=\"https://cloudinit.readthedocs.io/en/latest/topics/network-config-format-v2.html\">Networking Config Version 2 - Cloud Init</a></li>\n<li><a href=\"https://geekcontainer.wordpress.com/2018/10/05/lxc-container-networkingnat-bridge/\">LXC Container Networking:NAT Bridge</a></li>\n<li><a href=\"https://wildwolf.name/a-simple-script-to-create-systemd-nspawn-alpine-container/\">A Simple Script to Create systemd-nspawn Alpine Container</a></li>\n<li><a href=\"https://seanmcgary.com/posts/run-docker-containers-with-systemd-nspawn/\">Run Docker containers with systemd-nspawn</a></li>\n<li><a href=\"https://opensource.com/article/18/11/systemd-nspawn-system-recovery\">How to use systemd-nspawn for Linux system recovery</a></li>\n<li><a href=\"https://liolok.github.io/Run-Desktop-Apps-with-systemd-nspawn-Container/\">Run Desktop Apps with systemd-nspawn Container</a></li>\n<li><a href=\"https://etbe.coker.com.au/2019/12/09/systemd-nspawn-networking/\">systemd-nspawn and Private Networking</a></li>\n<li><a href=\"https://ramsdenj.com/2016/09/23/containerizing-graphical-applications-on-linux-with-systemd-nspawn.html\">Containerizing Graphical Applications On Linux With systemd-nspawn</a></li>\n<li><a href=\"https://unix.stackexchange.com/questions/411622/systemd-nspawn-redirect-ports-and-keep-internet\">systemd-nspawn: redirect ports and keep internet</a></li>\n<li><a href=\"https://copyninja.info/blog/taming_systemd_nsapwn.html\">Taming systemd-nspawn for running containers</a></li>\n<li><a href=\"https://wiki.archlinux.org/index.php/Systemd-nspawn\">systemd-nspawn Archwiki</a></li>\n<li><a href=\"https://askubuntu.com/questions/177985/natting-in-ubuntu-server\">NATTING in Ubuntu Server</a></li>\n<li><a href=\"https://docs.trentsonlinedocs.xyz/lxd_container_home_server_networking_for_dummies/\">LXD Container Home Server Networking For Dummies</a></li>\n<li><a href=\"https://www.dedoimedo.com/computers/docker-networking.html\">Docker containers networking - Tutorial</a></li>\n<li><a href=\"https://blog.scottlowe.org/2015/11/09/changing-passwords-cloud-init/\">Changing Passwords with cloud-init</a></li>\n<li><a href=\"https://vitux.com/how-to-configure-networking-with-netplan-on-ubuntu/\">How to configure networking with Netplan on Ubuntu</a></li>\n<li><a href=\"http://tejom.github.io/c/linux/containers/docker/networking/2016/10/08/containers-from-scratch-pt2-networking.html\">Containers From Scratch Pt.2 Networking</a></li>\n</ul>","frontmatter":{"title":"systemd-nspawn - Containerization - Part 2","date":"28 November, 2020","tags":["til","systemd","nspawn","systemd-nspawn","linux","unix","script","containers","development"]},"excerpt":"Recap: In the last part of the series, we saw how to configure the network in host for containers and learnt how to pull images using…"}},"pageContext":{"slug":"/systemd-nspawn-container-musings-part-2/","prev":{"fields":{"slug":"/systemd-nspawn-container-musings-part-1/"},"frontmatter":{"published":true}},"next":null}},"staticQueryHashes":["63159454"]}