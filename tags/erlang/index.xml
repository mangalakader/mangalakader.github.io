<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>erlang on PMK</title>
    <link>http://localhost:1313/tags/erlang/</link>
    <description>Recent content in erlang on PMK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/erlang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Instant Messaging using erlang and XMPP — Part 4</title>
      <link>http://localhost:1313/post/xmpp-mongooseim-ejabberd-erlang-journey-part-4/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/xmpp-mongooseim-ejabberd-erlang-journey-part-4/</guid>
      <description>Note: When I started writing this, I was using customized mongooseim version 3.7.1, now latest updates using TOML config and such have come up as on July 2021. So, if you want to refer to the latest documentation, feel free to read it here .
Important files and hierarchies Last part, we saw how a stanza is represented in Erlang Terms (erlang records). This part we&amp;rsquo;ll be seeing the important files and how they fit into the functioning of MongooseIM.</description>
    </item>
    
    <item>
      <title>Instant Messaging using erlang and XMPP — Part 3</title>
      <link>http://localhost:1313/post/xmpp-mongooseim-ejabberd-erlang-journey-part-3/</link>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/xmpp-mongooseim-ejabberd-erlang-journey-part-3/</guid>
      <description>Note: When I started writing this, I was using customized mongooseim version 3.7.1, now latest updates using TOML config and such have come up as on July 2021. So, if you want to refer to the latest documentation, feel free to read it here .
XMPP Jargon Client to Server (C2S) The client can be any medium such as mobile, web or any application that knows to talk in XMPP protocol</description>
    </item>
    
    <item>
      <title>Instant Messaging using Erlang and XMPP — Part 2 — Local Dev Setup</title>
      <link>http://localhost:1313/post/xmpp-mongooseim-ejabberd-erlang-journey-part-2/</link>
      <pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/xmpp-mongooseim-ejabberd-erlang-journey-part-2/</guid>
      <description>Note: When I started writing this, I was using customized MongooseIM version 3.7.1, now latest updates using TOML config and such have come up as on July 2021. So, if you want to refer to the latest documentation, feel free to read it here .
Setting Up Local Development Environment for MongooseIM: There are a couple of ways to set up local development environment, obviously, first one is to clone the official repo and getting started, which if you have to do it for multiple systems, becomes a tedious job.</description>
    </item>
    
    <item>
      <title>Erlang Help Docs on Elixir Shell - Using ASDF or Kerl</title>
      <link>http://localhost:1313/post/erlang-docs-on-elixir-iex-shell/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/erlang-docs-on-elixir-iex-shell/</guid>
      <description>Note: Proceed if you&amp;rsquo;re already using ASDF or Kerl for Elixir/Erlang Version Management
Elixir is very well known for it&amp;rsquo;s documentation and community involvement and most of the developers, when they adopt elixir, they first struggle to find the help documentation for erlang functions.
We all would have come across this message when using:
iex(1)&amp;gt; h :heart **heart module not compiled with erlang docs So, how do we enable documentation for erlang functions: The solution that I&amp;rsquo;m going to discuss is relevant with ASDF or Kerl.</description>
    </item>
    
    <item>
      <title>Instant Messaging using Erlang and XMPP — Part 1</title>
      <link>http://localhost:1313/post/xmpp-mongooseim-ejabberd-erlang-journey-part-1/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/xmpp-mongooseim-ejabberd-erlang-journey-part-1/</guid>
      <description>Instant Messaging It&amp;rsquo;s a type of real-time text transmission over the internet and if you want detailed description of what it is please look it up here Underlying Basics There are a couple of things, we need to understand about real-time technologies:
The underlying protocol is not HTTP/HTTPS, but raw TCP with TLS which is equivalent to HTTPS per se also there is a web socket which has been recently gaining popularity in the recent years The fore mentioned protocols heavily rely on keeping the connection to the servers alive until the user forcefully disconnects, whereas the HTTP ones are open and close for every request strategy and not suitable when you want to hit real-time messaging.</description>
    </item>
    
    <item>
      <title>Elixir - How to solve recompile :noop Issue using VIM</title>
      <link>http://localhost:1313/post/elixir-shell-recompile-noop-issue/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/elixir-shell-recompile-noop-issue/</guid>
      <description>Many of us are using more advanced editors such as Vim, Visual Studio Code, etc,. We all depend on the linters too much to correct our mistakes such as syntax errors. So, what is this specific topic related to? If you have started asking this question and you have found this link means, you are in the right place.
Let&amp;rsquo;s consider our normal dev course: Below is a dummy test app of my making.</description>
    </item>
    
    <item>
      <title>Download Project Binaries using HTTPoison - Elixir</title>
      <link>http://localhost:1313/post/download-binaries-using-httpoison-elixir-the-correct-way/</link>
      <pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/download-binaries-using-httpoison-elixir-the-correct-way/</guid>
      <description>There are tons of methods for organising binaries into a particular project in different programming languages. But, I am writing this method particularly to illustrate the pure usage of elixir and joy of learning it! This tutorial is for intermediate users with enough experience in using elixir. I hope you enjoy it!
How can you leverage it? It could be anyone of the following:
a mix task a genserver a function a escript etc.</description>
    </item>
    
    <item>
      <title>Delete Saved Shell Cmd History in Erlang / Elixir</title>
      <link>http://localhost:1313/post/erlang-elixir-session-shell-cmd-history/</link>
      <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/erlang-elixir-session-shell-cmd-history/</guid>
      <description>To Enable erlang / elixir shell history across sessions: There are lot of tutorials out there illustrating how to enable persistent shell history in erlang / elixir, one such example is found here , so I am not going to elaborate it here.
What if you wanted to delete your shell history: There are not many examples as to how to delete them, once they saved. People have even suggested to disable the shell history and re-enable them, which do not help.</description>
    </item>
    
  </channel>
</rss>
