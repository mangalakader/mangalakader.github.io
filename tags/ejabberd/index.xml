<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ejabberd on PMK</title>
    <link>https://mangalakader.github.io/tags/ejabberd/</link>
    <description>Recent content in ejabberd on PMK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://mangalakader.github.io/tags/ejabberd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Instant Messaging using Erlang and XMPP — Part 2 — Local Dev Setup</title>
      <link>https://mangalakader.github.io/post/xmpp-mongooseim-ejabberd-erlang-journey-part-2/</link>
      <pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mangalakader.github.io/post/xmpp-mongooseim-ejabberd-erlang-journey-part-2/</guid>
      <description>Note: When I started writing this, I was using customized MongooseIM version 3.7.1, now latest updates using TOML config and such have come up as on July 2021. So, if you want to refer to the latest documentation, feel free to read it here .
Setting Up Local Development Environment for MongooseIM: There are a couple of ways to set up local development environment, obviously, first one is to clone the official repo and getting started, which if you have to do it for multiple systems, becomes a tedious job.</description>
    </item>
    
    <item>
      <title>Instant Messaging using Erlang and XMPP — Part 1</title>
      <link>https://mangalakader.github.io/post/xmpp-mongooseim-ejabberd-erlang-journey-part-1/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mangalakader.github.io/post/xmpp-mongooseim-ejabberd-erlang-journey-part-1/</guid>
      <description>Instant Messaging It&amp;rsquo;s a type of real-time text transmission over the internet and if you want detailed description of what it is please look it up here Underlying Basics There are a couple of things, we need to understand about real-time technologies:
 The underlying protocol is not HTTP/HTTPS, but raw TCP with TLS which is equivalent to HTTPS per se also there is a web socket which has been recently gaining popularity in the recent years  The fore mentioned protocols heavily rely on keeping the connection to the servers alive until the user forcefully disconnects, whereas the HTTP ones are open and close for every request strategy and not suitable when you want to hit real-time messaging.</description>
    </item>
    
  </channel>
</rss>
