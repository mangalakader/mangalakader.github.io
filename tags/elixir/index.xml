<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>elixir on PMK</title>
    <link>http://localhost:1313/tags/elixir/</link>
    <description>Recent content in elixir on PMK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/elixir/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Erlang Help Docs on Elixir Shell - Using ASDF or Kerl</title>
      <link>http://localhost:1313/post/erlang-docs-on-elixir-iex-shell/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/erlang-docs-on-elixir-iex-shell/</guid>
      <description>Note: Proceed if you&amp;rsquo;re already using ASDF or Kerl for Elixir/Erlang Version Management
Elixir is very well known for it&amp;rsquo;s documentation and community involvement and most of the developers, when they adopt elixir, they first struggle to find the help documentation for erlang functions.
We all would have come across this message when using:
iex(1)&amp;gt; h :heart **heart module not compiled with erlang docs So, how do we enable documentation for erlang functions: The solution that I&amp;rsquo;m going to discuss is relevant with ASDF or Kerl.</description>
    </item>
    
    <item>
      <title>Taking MFA to next level - A new approach!</title>
      <link>http://localhost:1313/post/time-based-one-time-password-elixir-phoenix/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/time-based-one-time-password-elixir-phoenix/</guid>
      <description>What is TOTP? Those who have enabled multi-factor authentication (mfa) in his/her Google accounts, major vendors out there are aware of the importance of having them. For others, who are not aware of what mfa is and how it works, please look into the following wiki link: TOTP Wiki Page
Traditional Approach of TOTP apps: Most of the Authenticator apps out there, starts providing One Time Password easily, when you:</description>
    </item>
    
    <item>
      <title>Elixir - How to solve recompile :noop Issue using VIM</title>
      <link>http://localhost:1313/post/elixir-shell-recompile-noop-issue/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/elixir-shell-recompile-noop-issue/</guid>
      <description>Many of us are using more advanced editors such as Vim, Visual Studio Code, etc,. We all depend on the linters too much to correct our mistakes such as syntax errors. So, what is this specific topic related to? If you have started asking this question and you have found this link means, you are in the right place.
Let&amp;rsquo;s consider our normal dev course: Below is a dummy test app of my making.</description>
    </item>
    
    <item>
      <title>Download Project Binaries using HTTPoison - Elixir</title>
      <link>http://localhost:1313/post/download-binaries-using-httpoison-elixir-the-correct-way/</link>
      <pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/download-binaries-using-httpoison-elixir-the-correct-way/</guid>
      <description>There are tons of methods for organising binaries into a particular project in different programming languages. But, I am writing this method particularly to illustrate the pure usage of elixir and joy of learning it! This tutorial is for intermediate users with enough experience in using elixir. I hope you enjoy it!
How can you leverage it? It could be anyone of the following:
a mix task a genserver a function a escript etc.</description>
    </item>
    
    <item>
      <title>Delete Saved Shell Cmd History in Erlang / Elixir</title>
      <link>http://localhost:1313/post/erlang-elixir-session-shell-cmd-history/</link>
      <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/erlang-elixir-session-shell-cmd-history/</guid>
      <description>To Enable erlang / elixir shell history across sessions: There are lot of tutorials out there illustrating how to enable persistent shell history in erlang / elixir, one such example is found here , so I am not going to elaborate it here.
What if you wanted to delete your shell history: There are not many examples as to how to delete them, once they saved. People have even suggested to disable the shell history and re-enable them, which do not help.</description>
    </item>
    
  </channel>
</rss>
